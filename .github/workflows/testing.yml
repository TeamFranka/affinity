name: Test E2E
on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main, production ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests:
    runs-on: ubuntu-latest
    environment: cypress_tests
    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    steps:
      - uses: actions/checkout@v2
      - name: Setup docker-compose stack
        run: 'npm run ci:run-parse'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install ionic
        run: npm install @ionic/cli
      - name: Install dependencies
        run: npm install
      # Runs
      - name: Check docker
        run: |
          docker ps -a && docker-compose logs --tail 10
          [ `docker ps -q --filter "name=parse" | wc -l` -eq 1 ]
      - name: Set up DB
        run: 'npm run ci:setup-db'
      - name: Running e2e with cypress
        uses: cypress-io/github-action@v2
        with:
          ## FIXME: run this against the locally deployed version?
          start: npm run serve
          # quote the url to be safe against YML parsing surprises
          wait-on: 'http://localhost:8080'
        env:
          # pass the Dashboard record key as an environment variable
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: 'Test Error Screenshots'
          path: tests/e2e/screenshots
      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: 'Test Error Recordings'
          path: tests/e2e/videos

  prepare-deployment:
    # onlyrun when we were successful
    if: "github.ref == 'refs/heads/production' && !contains(github.event.head_commit.message, '[ci skip deploy]')"
    runs-on: ubuntu-latest
    needs: [ tests ]

    environment: b4a_deploy

    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install ionic
        run: npm install @ionic/cli
      - name: Install dependencies
        run: npm install
      - name: Build locally
        run: |
          npm run build -- --prod

        env:
          VUE_APP_DEFAULT_TEAM: ${{ secrets.VUE_APP_DEFAULT_TEAM}}
          VUE_APP_PARSE_APP_ID: ${{ secrets.VUE_APP_PARSE_APP_ID}}
          VUE_APP_PARSE_JS_KEY: ${{ secrets.VUE_APP_PARSE_JS_KEY}}
          VUE_APP_PARSE_URL: ${{ secrets.VUE_APP_PARSE_URL}}
          VUE_APP_PARSE_LIVE_URL: ${{ secrets.VUE_APP_PARSE_LIVE_URL }}
      - name: Archive /dist
        uses: actions/upload-artifact@v2
        with:
          name: dist-production
          path: |
            dist
      - name: tag production
        run: |
          git tag --force production
          git push --force origin production

