name: "Build (and deploy) Affinity App"
on:
  # push:
  #   branches: [ main ]
  #   tags: [ production ]
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab only
  workflow_dispatch:

env:
  INDEX_HTML: community.affinity.wtf.html
  CAP_PROJECT: affinity-app
  CAP_PATH: affinity
  APPCENTER_PROJECT_ANDROID: TeamFranka/Affinity-Live
  APPCENTER_PROJECT_IOS: TeamFranka/Affinity-Live-iOS
  VERSION_MIN: 68

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  release-build:
    runs-on: ubuntu-latest
    environment: b4a_deploy
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install ionic
        run: npm install @ionic/cli
      - name: Install dependencies
        run: npm install
      - name: Build locally
        run: |
          npm run build -- --prod

        env:
          VUE_APP_DEFAULT_TEAM: ${{ secrets.VUE_APP_DEFAULT_TEAM}}
          VUE_APP_PARSE_APP_ID: ${{ secrets.VUE_APP_PARSE_APP_ID}}
          VUE_APP_PARSE_JS_KEY: ${{ secrets.VUE_APP_PARSE_JS_KEY}}
          VUE_APP_PARSE_URL: ${{ secrets.VUE_APP_PARSE_URL}}
          VUE_APP_PARSE_LIVE_URL: ${{ secrets.VUE_APP_PARSE_LIVE_URL }}
      - name: Patch dist
        run: cp -f dist/${{env.INDEX_HTML}} dist/index.html
      - name: Archive /dist
        uses: actions/upload-artifact@v2
        with:
          name: dist-production
          path: |
            dist

  android-app:
    needs: release-build
    environment: android_app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install capacitor
        run: npm install capacitor
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Sync assets
        run: npx ionic capacitor sync --no-build --project ${{ env.CAP_PROJECT }} --verbose android
      - name: Build Android App
        run: |
          export BUILD_NUMBER=$(($GITHUB_RUN_NUMBER + $VERSION_MIN))
          cd apps/${{ env.CAP_PATH }}/android
          ./gradlew bundleRelease
      - uses: r0adkll/sign-android-release@v1
        name: Sign app Bundle
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: apps/${{ env.CAP_PATH }}/android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      - name: Archive Android App
        uses: actions/upload-artifact@v2
        with:
          name: android-app
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  ios-app:
    environment: ios_app
    runs-on: macos-latest
    needs: release-build
    steps:
      - uses: actions/checkout@v2
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install capacitor
        run: npm install capacitor
      - name: Update fastlane
        run: gem install fastlane
      - name: Sync assets
        run: npx ionic capacitor sync --no-build --project ${{ env.CAP_PROJECT }} --verbose ios
      - name: "Update Build Version"
        run: |
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $GITHUB_RUN_NUMBER" "apps/${{ env.CAP_PATH }}/ios/App/App/Info.plist"
      - name: Build iOS App
        uses: yukiarrr/ios-build-action@v1.3.2
        continue-on-error: false
        with:
          project-path: apps/${{ env.CAP_PATH }}/ios/App/App.xcodeproj
          p12-base64: ${{ secrets.P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.WIRMD_MOBILEPROVISION_BASE64 }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          certificate-password: ${{ secrets.CREDENTIALS_PASSWORD }}
          team-id: ${{ secrets.TEAM_ID }}
          workspace-path: apps/${{ env.CAP_PATH }}/ios/App/App.xcworkspace # optional
          export-method: app-store
          output-path: 'ios-app.ipa'
      - name: Archive iOS App
        uses: actions/upload-artifact@v2
        with:
          name: ios-app
          path: |
            ios-app.ipa

  deploy-code-push-android:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ android-app ]
    # we only want to actually deploy from production
    if: "github.ref == 'refs/tags/production' && !contains(github.event.head_commit.message, '[ci skip deploy]') && !contains(github.event.head_commit.message, '[ci skip app-deploy]') &&  !contains(github.event.head_commit.message, '[ci skip android-deploy]')"
    steps:
      - uses: actions/checkout@v2
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Codepush Android
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        with:
          command: appcenter codepush release -m -a ${{env.APPCENTER_PROJECT_ANDROID}} -d Production -c dist -t 1.0.0
          token: ${{ secrets.APPCENTER_ACCESS_TOKEN }}

  deploy-code-push-ios:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ ios-app ]
    # we only want to actually deploy from production
    if: "github.ref == 'refs/tags/production' && !contains(github.event.head_commit.message, '[ci skip deploy]') && !contains(github.event.head_commit.message, '[ci skip app-deploy]') &&  !contains(github.event.head_commit.message, '[ci skip ios-deploy]')"
    steps:
      - uses: actions/checkout@v2
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Codepush iOS
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        with:
          command: appcenter codepush release -m -a ${{env.APPCENTER_PROJECT_IOS}} -d Production -c dist -t 1.0.0
          token: ${{ secrets.APPCENTER_ACCESS_TOKEN }}

  deploy-ios-app:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [deploy-code-push-ios, ios-app ]
    steps:
      - uses: actions/checkout@v2
      - name: Download signed iOS App
        uses: actions/download-artifact@v2
        with:
          name: ios-app
      - name: Deploy to Store
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        with:
          command: appcenter distribute release --release-notes-file docs/changelogs/App.txt --app ${{env.APPCENTER_PROJECT_IOS}} --store Production --file ios-app.ipa
          token: ${{ secrets.APPCENTER_ACCESS_TOKEN }}

  deploy-android-app:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ deploy-code-push-android, android-app ]
    steps:
      - uses: actions/checkout@v2
      - name: Download signed Android App
        uses: actions/download-artifact@v2
        with:
          name: android-app
      - name: Deploy to Store
        uses: avocaddo/AppCenter-Github-Action@v1.0.2
        with:
          command: appcenter distribute release --release-notes-file docs/changelogs/App.txt --app ${{env.APPCENTER_PROJECT_ANDROID}} --store Production --file app-release.aab
          token: ${{ secrets.APPCENTER_ACCESS_TOKEN }}