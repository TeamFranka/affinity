name: E2E Test and deploy
on:
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup docker-compose stack
        run: 'npm run ci:run-parse'
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install ionic
        run: npm install @ionic/cli
      - name: Install dependencies
        run: npm install
      # Runs
      - name: Check docker
        run: docker ps -a && docker-compose logs --tail 10
      - name: Set up DB
        run: 'npm run ci:setup-db'
      - name: Running e2e with cypress
        uses: cypress-io/github-action@v2
        with:
          ## FIXME: run this against the locally deployed version?
          start: npm run serve
          # quote the url to be safe against YML parsing surprises
          wait-on: 'http://localhost:8080'

  release-build:
    runs-on: ubuntu-latest
    environment: b4a_deploy

    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install ionic
        run: npm install @ionic/cli
      - name: Install dependencies
        run: npm install
      - name: Build locally
        run: |
          npm run build -- --prod

        env:
          VUE_APP_DEFAULT_TEAM: ${{ secrets.VUE_APP_DEFAULT_TEAM}}
          VUE_APP_PARSE_APP_ID: ${{ secrets.VUE_APP_PARSE_APP_ID}}
          VUE_APP_PARSE_JS_KEY: ${{ secrets.VUE_APP_PARSE_JS_KEY}}
          VUE_APP_PARSE_URL: ${{ secrets.VUE_APP_PARSE_URL}}
          VUE_APP_PARSE_LIVE_URL: ${{ secrets.VUE_APP_PARSE_LIVE_URL }}
      - name: Archive /dist
        uses: actions/upload-artifact@v2
        with:
          name: dist-production
          path: |
            dist

  android-app:
    runs-on: ubuntu-latest
    needs: release-build
    environment: android_app
    steps:
      - uses: actions/checkout@v2
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install capacitor
        run: npm install capacitor
      - name: Sync assets
        run: npx cap sync android
      - name: Build Android App
        uses: sparkfabrik/android-build-action@v1.0.0
        with:
          project-path: android
          output-path: android-app.apk
      - uses: r0adkll/sign-android-release@v1
        name: Sign app APK
        # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: ./
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
      - name: Archive Android App
        uses: actions/upload-artifact@v2
        with:
          name: android-app
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  ios-app:
    environment: ios_app
    runs-on: macos-latest
    needs: release-build
    steps:
      - uses: actions/checkout@v2
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install capacitor
        run: npm install capacitor
      - name: Sync assets
        run: npx cap sync ios
      - name: Build iOS App
        uses: yukiarrr/ios-build-action@v1.3.2
        continue-on-error: false
        with:
          project-path: ios/App/App.xcodeproj
          p12-base64: ${{ secrets.P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          code-signing-identity: ${{ secrets.CODE_SIGNING_IDENTITY }}
          certificate-password: ${{ secrets.CREDENTIALS_PASSWORD }}
          team-id: ${{ secrets.TEAM_ID }}
          workspace-path: ios/App/App.xcworkspace # optional
          export-method: ad-hoc
          output-path: 'ios-app.ipa'
      - name: Archive iOS App
        uses: actions/upload-artifact@v2
        with:
          name: ios-app
          path: |
            ios-app.ipa

  deploy-parse:
    environment: b4a_deploy
    runs-on: ubuntu-latest
    needs: [ tests, release-build, android-app, ios-app ]
    if: "!contains(github.event.head_commit.message, '[ci skip deploy]')"
    steps:
      - uses: actions/checkout@v2
      - name: Install Back4Appp
        run: |
          curl https://raw.githubusercontent.com/back4app/parse-cli/back4app/installer.sh | sudo /bin/bash
          alias b4a=/usr/local/bin/b4a
      - name: Configure Back4App
        run: echo ${{ secrets.B4A_ACCOUNT_KEY}} | b4a configure accountkey
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: './node_modules'
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install capacitor
        run: npm install
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Download signed Android App
        uses: actions/download-artifact@v2
        with:
          name: android-app
      - name: Copy App to asset
        run: |
          mkdir -p dist/assets/apps
          mv *.apk dist/assets/apps
      - name: Deploy db
        run: |
          npm run deploy:db
        env:
          VUE_APP_DEFAULT_TEAM: ${{ secrets.VUE_APP_DEFAULT_TEAM}}
          VUE_APP_PARSE_APP_ID: ${{ secrets.VUE_APP_PARSE_APP_ID}}
          VUE_APP_PARSE_JS_KEY: ${{ secrets.VUE_APP_PARSE_JS_KEY}}
          VUE_APP_PARSE_MASTER_KEY: ${{ secrets.VUE_APP_PARSE_MASTER_KEY}}
          VUE_APP_PARSE_URL: ${{ secrets.VUE_APP_PARSE_URL}}
          VUE_APP_PARSE_LIVE_URL: ${{ secrets.VUE_APP_PARSE_LIVE_URL }}
          VUE_APP_I18N_LOCALE: de
      - name: Deploy Cloud Code & Apps
        run: |
          cd backend
          b4a deploy affinity

  deploy-docker-image:
    environment: docker_deploy
    needs: [ deploy-parse ]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup docker-compose stack
        run: 'npm run ci:run-parse'
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Deploying latest dev image"
        run: docker-compose push parse

  deploy-code-push-android:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ deploy-parse ]
    if: "!contains(github.event.head_commit.message, '[ci skip deploy-app]')"
    steps:
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Codepush Android
        uses: NishanthShankar/codepush-action@master
        with:
          args: release -m -a TeamFranka/Affinity-Live -d Production -c dist -t 1.0.0
        env:
          APPCENTER_ACCESS_TOKEN: ${{ secrets.APPCENTER_ACCESS_TOKEN }}

  deploy-code-push-ios:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ deploy-parse ]
    if: "!contains(github.event.head_commit.message, '[ci skip deploy-app]')"
    steps:
      - name: Download /dist
        uses: actions/download-artifact@v2
        with:
          name: dist-production
          path: dist
      - name: Codepush iOS
        uses: NishanthShankar/codepush-action@master
        with:
          args: release -m -a TeamFranka/Affinity-Live-iOS -d Production -c dist  -t 1.0.0
        env:
          APPCENTER_ACCESS_TOKEN: ${{secrets.APPCENTER_ACCESS_TOKEN}}

  deploy-ios-beta:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ deploy-code-push-ios, ios-app ]
    steps:
      - name: Download signed iOS App
        uses: actions/download-artifact@v2
        with:
          name: ios-app
      - name: upload artefact to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: TeamFranka/Affinity-Live-iOS
          token: ${{secrets.APPCENTER_ACCESS_TOKEN}}
          group: "Public Beta"
          file: ios-app.ipa
          notifyTesters: false
          debug: false

  deploy-android-beta:
    environment: appcenter_deploy
    runs-on: ubuntu-latest
    needs: [ deploy-code-push-android, android-app ]
    steps:
      - name: Download signed Android App
        uses: actions/download-artifact@v2
        with:
          name: android-app
      - name: upload artefact to App Center
        uses: wzieba/AppCenter-Github-Action@v1
        with:
          appName: TeamFranka/Affinity-Live
          token: ${{secrets.APPCENTER_ACCESS_TOKEN}}
          group: "Public Beta"
          file: android-app-signed.apk
          notifyTesters: false
          debug: false

  deploy-ios:
    environment: ios_deploy
    runs-on: macos-latest
    needs: [ ios-app, deploy-parse ]
    if: false == true #  disabled until we've got it working.
    steps:
      - name: Download signed iOS App
        uses: actions/download-artifact@v2
        with:
          name: ios-app
      - name: 'Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ios-app.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
